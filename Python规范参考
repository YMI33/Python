1. 括号中使用垂直隐式缩进或使用悬挂缩进
缩进
每级缩进用4个空格
•	示例：
 
 
(垂直隐式缩进)对准左括号def function_name(var_one,var_two,
                  var_three,var_four,)
不对准左括号，但是要比下面的代码内容多一层缩进以便和后面的内容区别开来def function_name(var_one,var_two,
        var_three,var_four,)
    print('hello,world')--------------------------------------------------------------------------------
悬挂缩进必须多加一层缩进def function_name(
    var_one,var_two,
    var_three,var_four,)--------------------------------------------------------------------------------# 左括号回退
my_list = [
    1,2,3,4,5,
    6,7,8,9,10
]
result = function_name (
    'a','b','c',
    'd','e','f'
)
 
 2. 空格还是tab ？
•	空格是首选的缩进方法
•	Tab仅仅在已经使用tab缩进的代码中为了保持一致性而使用。
•	Python 3中不允许混合使用Tab和空格缩进。
•	Python 2的包含空格与Tab和空格缩进的应该全部转为空格缩进
•	Python2命令行解释器使用-t选项时有非法混合Tab和空格的情况会告警。当使用-tt警告提升为错误。强烈推荐这些选项！另外个人推荐pep8和autopep8模块。
3. 最大行宽
•	限制所有行的最大行宽为79字符。
•	文本长块，比如文档字符串或注释，行长度应限制为72个字符。
 
 
# 续行的首选方法是使用小括号、中括号和大括号反斜线仍可能在适当的时候。其次是反斜杠。比如with语句中：
with open('/path/to/some/file/you/want/to/read') as file_1, \
    open('/path/to/some/file/being/written', 'w') as file_2:
    file_2.write(file_1.read())--------------------------------------------------------------------------------# 注意续行要尽量不影响可读性。比如通常在二元运算符之后续行：class Rectangle(Blob):

    def __init__(self, width, height,
                color='black', emphasis=None, highlight=0):
        if (width == 0 and height == 0 and
                color == 'red' and emphasis == 'strong' or
                highlight > 100):
            raise ValueError("sorry, you lose")
        if width == 0 and height == 0 and (color == 'red' or
                                          emphasis is None):
            raise ValueError("I don't think so -- values are %s, %s" %
                            (width, height))
        Blob.__init__(self, width, height,
                      color, emphasis, highlight)
 
4. 空行
•	两行空行分割顶层函数和类的定义。
•	类的方法定义用单个空行分割。
•	额外的空行可以必要的时候用于分割不同的函数组，但是要尽量节约使用。
•	额外的空行可以必要的时候在函数中用于分割不同的逻辑块，但是要尽量节约使用。
•	Python接 contol-L作为空白符；许多工具视它为分页符，这些要因编辑器而异。
5. 源文件编码
•	在核心Python发布的代码应该总是使用UTF-8(ASCII在Python 2)。
•	ASCII文件(Python 2)或UTF-8(Python 3)不应有编码声明。
•	标准库中非默认的编码应仅用于测试或当注释或文档字符串,比如包含非ASCII字符的作者姓名，尽量使用\x , \u , \U , or \N。
•	Python 3.0及以后版本，PEP 3131可供参考，部分内容如下：在Python标准库必须使用ASCII标识符，并尽量只使用英文字母。此外字符串和注释也必须用ASCII。唯一的例外是：（a）测试非ASCII的功能，和（b）作者的名字不是拉丁字母。
6. 导入
•	导入在单独行
 
# 正确方式import osimport sysfrom subprocess import Popen, PIPE# 错误方式import os,sys
•	导入始终在文件的顶部，在模块注释和文档字符串之后，在模块全局变量和常量之前
　　　　导入顺序如下：标准库进口,相关的第三方库，本地库。各组的导入之间要有空行。
　　　　相关的all放在导入之后。
•	推荐绝对路径导入，因为它们通常更可读，而且往往是表现更好的（或至少提供更好的错误消息）。
 
 
import mypkg.siblingfrom mypkg import siblingfrom mypkg.sibling import example
# 在绝对路径比较长的情况下，也可以使用相对路径：from . import siblingfrom .sibling import example
Python 3中已经禁止隐式的相对导入.
 
•	 导入类的方法：
 
from myclass import MyClassfrom foo.bar.yourclass import YourClass
# 如果和本地名字有冲突：import myclassimport foo.bar.yourclass
•	禁止使用通配符导入。
　　通配符导入(from <module> import *)应该避免，因为它不清楚命名空间有哪些名称存，混淆读者和许多自动化的工具。唯一的例外是重新发布对外的API时可以考虑使用。
7. 字符串的引用
•	Python中单引号字符串和双引号字符串都是相同的。注意尽量避免在字符串中的反斜杠以提高可读性。
•	根据PEP 257, 三个引号都使用双引号。
8. 表达式和语句的空格
•	括号里边避免空格
 
# 括号里边避免空格
# 正确写法
spam(ham[1], {eggs: 2})# 错误写法
spam( ham[ 1 ], { eggs: 2 } )
•	逗号，冒号，分号之前避免空格
 
# 逗号，冒号，分号之前避免空格
# 正确写法if x == 4: print x, y; x, y = y, x# 错误写法if x == 4 : print x , y ; x , y = y , x
•	索引操作中的冒号当作操作符处理前后要有同样的空格(一个空格或者没有空格，个人建议是没有)
 
 
# 正确写法
ham[1:9], ham[1:9:3], ham[:9:3], ham[1::3], ham[1:9:]
ham[lower:upper], ham[lower:upper:], ham[lower::step]
ham[lower+offset : upper+offset]
ham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]
ham[lower + offset : upper + offset]# 错误写法
ham[lower + offset:upper + offset]
ham[1: 9], ham[1 :9], ham[1:9 :3]
ham[lower : : upper]
ham[ : upper]
 
 
8. 注释
•	与代码自相矛盾的注释比没注释更差。修改代码时要优先更新注释！
•	注释是完整的句子。如果注释是断句，首字母应该大写，除非它是小写字母开头的标识符(永远不要修改标识符的大小写)。
•	如果注释很短，可以省略末尾的句号。注释块通常由一个或多个段落组成。段落由完整的句子构成且每个句子应该以点号(后面要有两个空格)结束，并注意断词和空格。
•	非英语国家的程序员请用英语书写你的注释，除非你120%确信代码永远不会被不懂你的语言的人阅读。
•	注释块通常应用在代码前，并和这些代码有同样的缩进。每行以 '# '(除非它是注释内的缩进文本，注意#后面有空格)。注释块内的段落用仅包含单个 '#' 的行分割。
•	慎用行内注释(Inline Comments) 节俭使用行内注释。 行内注释是和语句在同一行，至少用两个空格和语句分开。行内注释不是必需的，重复罗嗦会使人分心。不要这样做：
 
# 正确写法
x = x + 1 # Compensate for border
# 错误写法
x = x + 1 # Increment x
9. 文档字符串
•	docstring是一个字符串文字，作为模块，函数，类或方法定义中的第一个语句出现。这样的docstring成为该对象的__doc__特殊属性
•	所有模块通常应该有文档，所有由模块导出的函数和类也应该有文档。公共方法（包括__init__构造函数）也应该有docstrings。软件包可能记录在软件包目录中的__init__.py文件的模块文档字符串中
•	Python代码中其他地方出现的字符串文字也可以作为文档。它们不被Python字节码编译器识别，并且不能作为运行时对象属性（即未分配给__doc__）访问，但可以通过软件工具提取两种类型的额外文档字符串：
1.	在模块，类或__init__方法的顶级简单赋值之后立即出现的字符串文字被称为“属性文档字符串”
2.	在另一个文档字符串之后立即出现的字符串文字称为“其他文档字符串”
10. 版本标签
版本注记 (Version Bookkeeping)
•	如果你必须在源文件中包含git、Subversion、CVS或RCS crud信息，放置在模块的文档字符串之后，任何其他代码之前，上下各用一个空行：
　　　　__version__ = "$Revision$"# $Source$
11. 命名约定
•	b(单个小写字母)
•	B(单个大写字母)
•	lowercase(小写串)
•	lower_case_with_underscores(带下划线的小写)
•	UPPERCASE(大写串)
•	UPPER_CASE_WITH_UNDERSCORES(带下划线的大写串)
•	CapitalizedWords(首字母大写的单词串或驼峰缩写）
　 注意: 使用大写缩写时，缩写使用大写字母更好。故 HTTPServerError 比 HttpServerError 更好
•	mixedCase(混合大小写，第一个单词是小写)
•	Capitalized_Words_With_Underscores（带下划线，首字母大写，丑陋）

