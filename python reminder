python是rightmost优先
a.arrange(6).reshape([3,2])
=>[[0,1],[2,3],[4,5]]

在 python 中，strings, tuples, 和 numbers 是不可更改（immutable）的对象，而 list,dict 等则是可以修改（mutable）的对象。
即经过函数处理后，不可更改对象值并不发生变化，但可更改对象值会发生变化。

逻辑运算：
&  ：可用于左右数组型条件，生成布尔序列，左右两序列必须加()，例如：(LR_zonal.plev>=30000) & (LR_zonal.plev<=92500)
and：只针对左右标量型条件，结果True或者False

assignment | shallow copy | deepcopy:
assignment: 表示生成指向同一内存地址的变量，相当于重命名了一个快捷方式 -> a=b
shallow copy: 复制一个新变量，但是这个变量架构与原变量一致，所以2层以上引用时会造成原本变量的更改。（我的附庸的附庸，不是我的附庸） -> a[i]=b;for loop; a=list(b)
deep copy: 重新用一个新内存地址，从头到尾重构一个变量，与fortran, matlab中的复制一致 -> a=copy.deepcopy(b)

类内调用函数: 类名.函数名
class.function()

运行字符串命令函数：复制(exec);运行命令(eval)

正则表达式
import re
sdftab = re.compile('.*=>')
sdftab.sub('',str)

=========
xarray
groupby(xr.IndexVariable('time',time.month)) 

Period年份数据
time0   = pd.Index(exp_dist[senario].time)
time    = pd.Index([pd.Period(freq='M',month=tperd.month,year=tperd.year) for tperd in time0])

提取dataarray数据
dataarray.item()

dataarray.interp插值需要除插值维数外其他维数均为ascending！！！

减去低维数数据
ctrlrep    = np.tile(datatemp.control.values[:12],int(datatemp.senario.sizes['time']/12))
datatemp.senario-ctrlrep

维数扩充
nidx = pd.MultiIndex.from_tuples(((x,y) for x in range(1,4) for y in range(1,13)),names=['year','month'])
data_CMIP6 = data_CMIP6.assign_coords(time = nidx)
datanew = data_CMIP6.unstack('time')

回归分析
1. sklearn
from sklearn.linear_model import LinearRegression
reg   = LinearRegression().fit(time.reshape(-1,1), data)
coef  = reg.coef_[0]
2. statsmodels
import statsmodels.api as sm
x     = time.year.values
x     = sm.add_constant(x)
y     = data.values
model = sm.OLS(y,x).fit()
wdis.loc[dict(lon=ilon,lat=ilat)] = model.params[1]
wtst.loc[dict(lon=ilon,lat=ilat)] = abs(model.tvalues[1]) > 1.96

去趋势
detrended_data = xr.apply_ufunc(signal.detrend, data, kwargs={'axis': data.get_axis_num(dimension)}, input_core_dims=[[dimension]], output_core_dims=[[dimension]])

增加全球坐标下周期点：
from cartopy.util import add_cyclic_point
# Add cyclic point to data
data, lons = add_cyclic_point(data, coord=ds['lon'])

设置countour label位置：
manual_locations = [(-1, -1.4), (-0.62, -0.7), (-2, 0.5), (1.7, 1.2), (2.0, 1.4), (2.4, 1.7)]
ax.clabel(CS, manual=manual_locations)


xarray年平均时间序列 （折线图小原则，xarray完成计算，pandas画图）
1 提取xarray数据；2 用pd.Index()设置时间序列；3 计算平均值groupby(xr.IndexVariable(dims='time',data=time.year))；4 squeeze(drop=True)数据；
5 转换pandas用.transpose().to_pandas().reset_index().set_index('time').plot(); 
time    = pd.Index(picvar.time)
data    = expdata.sel(run='scen').groupby(xr.IndexVariable(dims='time',data=time.year)).mean().squeeze(drop=True)
data.transpose().to_pandas().reset_index().set_index('time').plot()
Notes:
* 重设index：.reset_index().set_index('time')
* 选择时间sel(time=time[(time.month>=5) & (time.month<=9)])

xarray循环赋值技巧
    dim = t81.coords # 维数信息 {dim_name:dim_values ...}
    pdis = t81.isel(time=0).copy().squeeze(drop=True);pdis.name="wdis" # 初始化变量
    # 循环
    for ilon in dim['lon']:
        for ilat in dim['lat']:
            temp1 = t81.sel(lon=ilon,lat=ilat).squeeze()
            temp2 = t20.sel(lon=ilon,lat=ilat).squeeze()
            dis,dis_sig = wtest(temp1,temp2)
            pdis.loc[dict(lon=ilon,lat=ilat)] = dis # loc才能赋值
双x轴
ax1  = plt.subplot(122)
ax1.plot(albd_new['iceh'],albd_new['land'],c='r')
ax2  = ax1.twiny()
ax2.plot(albd_new['iceh']*20,albd_new['ocean'],c='b')
fig.legend(['land','ocean'],loc='center',bbox_to_anchor=(0.79,0.8))

设置ticks
ax.tick_params(direction='in',color='b',pad=-22, labelsize=12)

带属性输出nc文件
data.to_dataset(promote_attrs=True).to_netcdf('./output/test.nc')

====== EOF相关 ======
anaconda3/envs/xarray/lib/python3.9/site-packages/eofs/xarray.py文件订正：
#Lines 638 to 640
# Add non-dimension coordinates. 
pcs.coords.update({coord.name: (coord.dims, coord)
                       for coord in time_ndcoords})
                       
to
# Add non-dimension coordinates.
pcs.coords.update({coord.name: (coord.dims, coord.data)
                       for coord in time_ndcoords})


from eofs.xarray import Eof
# 选取区域并计算区域平均
PO_sst  = sst.sel(lon=slice(100,260),lat=slice(20,70))
PO4eof  = PO_sst.stack(time=['year','month']).transpose('time','lat','lon')
PO4eofa = PO4eof - PO4eof.mean('time')

# 计算面积权重
wgts1d  = np.sqrt(np.cos(np.deg2rad(PO4eofa.lat)))
wgts    = GeoFunction.conform(wgts1d,PO4eofa).transpose('time','lat','lon')

# EOF结果，eof为标准正交无单位量，pc带有单位
solver  = Eof(PO4eofa, weights=wgts)
eof     = solver.eofs(eofscaling=0)
pc      = solver.pcs(pcscaling=0)

# EOF还原（time=0），需除去面积权重
(eof*pc.isel(time=0)).sum('mode')/wgts.isel(time=0)
============
